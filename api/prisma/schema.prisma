// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String           @id @default(uuid())
  available      Boolean          @default(true)
  image          String
  nickName       String
  userName       String           @unique
  lastName       String
  email          String           @unique
  password       String
  verify         Boolean          @default(false)
  phone          Int
  city           String
  country        String
  rol            UserRole
  shows          EventArtist[]
  Favorites_User Favorites_User[]
}

model Event {
  id             String           @id @default(uuid())
  available      Boolean          @default(true)
  eventName      String           
  description    String
  imagesEvent    String[]
  duration       Int
  isActive       Boolean          @default(true)
  day            DateTime
  hour           DateTime
  premiumTickets Int
  generalTickets Int
  boxTickets     Int
  capacity       Int
  favorites      Favorites_User[]
  members        EventArtist[]
  categories     Category_Event[]
  // CalificationService CalificationService[] //calificaciones de los servicios!
}

model EventArtist {
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])
  userId String
  user   Users  @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}

model Category {
  id        Int              @unique @default(autoincrement())
  name      String
  asignedBy String
  shows     Category_Event[]
}

//relacion entre usuario-Artista y show:
model Category_Event {
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  assignedAt DateTime @default(now())

  @@id([eventId, categoryId]) //codificando la clave de la relacion
}

model Favorites_User {
  userId  String
  user    Users  @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

enum UserRole {
  USER
  ARTIST
  ADMIN
}

// model Token {
//   id
// }

///////////////////////// Pruebas /////////////////////////////////////
// model AppArtsist {
//   createdAt DateTime @default(now())
//   role      UserRole
//   userId String
//   showId String
//   @@id([userId, showId, role])
// }

// model CalificationService {
//   id        Int      @unique @default(autoincrement())
//   createdAt DateTime @default(now())
//   comments  String
//   score     Int // para presentarlo como un porcentaje result * 10^-1 = ...5%

//   //relacion al show
//   showId String
//   show   Show   @relation(fields: [showId], references: [id])
// }
