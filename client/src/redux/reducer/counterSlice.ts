import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../store/store';
import { isSomeAsyncActionsFulfilled, isSomeAsyncActionsPending, isSomeAsyncActionsRejected } from '../helpers';
import { incrementAsync, otherIncrementAsync } from '../thunks/counter';

export interface CounterState {
  value: number;
  status: 'iddle' | 'loading' | 'success' | 'failed';
}

const initialState: CounterState = {
  value: 0,
  status: 'iddle',
};

/* LAS ASYNC ACTIONS ESTÁN EN LA CARPETA DE THUNKS */
const isActionsPending = isSomeAsyncActionsPending([
  incrementAsync,
  otherIncrementAsync
]);

const isActionsFulfilled = isSomeAsyncActionsFulfilled([
  incrementAsync,
  otherIncrementAsync
]);

const isActionsRejected = isSomeAsyncActionsRejected([
  incrementAsync,
  otherIncrementAsync
]);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addMatcher(isActionsPending, (state) => {
        state.status = 'loading';
      })
      .addMatcher(isActionsFulfilled, (state, action) => {
        state.status = 'success';
        state.value += action.payload;
      })
      .addMatcher(isActionsRejected, (state, action) => {
        state.status = 'failed';
      })
  },
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
//export const selectCount = (state: RootState) => state.counter.value;

export default counterSlice.reducer;
