import { createSlice, PayloadAction } from '@reduxjs/toolkit';
//import { RootState } from '../store/store';
import { isSomeAsyncActionsFulfilled, isSomeAsyncActionsPending, isSomeAsyncActionsRejected } from '../helpers';
import { RootState } from '../store/store';
import { getAllShows } from '../thunks/show';
//import { incrementAsync, otherIncrementAsync } from '../thunks/counter';

//Acá se ingresan los parámetros qué se recibirán desde el backend
export type ShowArgs = {
    id: number;
    nickName: string;
    eventName: string;
    description: string;
    imagesEvent: string[],
    duration: number;
    isActive: boolean;
    priceTime: number;
    priceDay: number;
    categories: string[];
    members: string[];
}

export interface ShowState {
    data: ShowArgs[],
    detail: ShowArgs[],
    request: 'idle' | 'loading';
    status: 'idle' | 'success' | 'failed';
}

const initialState: ShowState = {
    data: [],
    detail: [],
    /* Estos estados son para validar el status de las peticiones al backend */
    request: 'idle',
    status: 'idle'
};

/* LAS ASYNC ACTIONS ESTÁN EN LA CARPETA DE THUNKS */
const isActionsPending = isSomeAsyncActionsPending([
    getAllShows
]);

const isActionsFulfilled = isSomeAsyncActionsFulfilled([
    getAllShows
]);

const isActionsRejected = isSomeAsyncActionsRejected([
    getAllShows
]);

export const showSlice = createSlice({
    name: 'show',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        getByName: (state, action: PayloadAction<ShowArgs[]>) => {
            state.data = action.payload;
        },
        getDetail: (state, action: PayloadAction<ShowArgs[]>) => {
            state.detail = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addMatcher(isActionsPending, (state) => {
                state.request = 'loading';
            })
            .addMatcher(isActionsFulfilled, (state, action) => {
                state.request = 'idle';
                state.status = 'success';
                state.data = action.payload.data;
            })
            .addMatcher(isActionsRejected, (state, action) => {
                state.request = 'idle';
                state.status = 'failed';
            })
    },
});

export const { getByName, getDetail } = showSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectArtist = (state: RootState) => state.shows;

export default showSlice.reducer;
